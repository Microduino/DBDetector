#include <U8glib.h> 
#include "key.h"
#include <Adafruit_NeoPixel.h>
#define voice 30
#define INTERVAL_LCD 50 
#define maxNoise 5
#define mic_pin A0
#define PIN 6
#define buzzer_pin 10
#define key_pin 8

int voice_data;
double db;
long time, timer;
int numNoise=0;
boolean buzzer_speak;
boolean add;
int i = 200;
double recodeDB=0.0;

unsigned long lcd_time = millis();

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);//定义OLED连接方式
#define INTERVAL_OLED 200 //define OLED update duration
//-------字体设置，大、中、小
#define setFont_L u8g.setFont(u8g_font_fur25)
#define setFont_M u8g.setFont(u8g_font_fixed_v0r)
#define setFont_S u8g.setFont(u8g_font_chikitar)

unsigned long OLEDShowTime = millis(); //OLED refersh timmer


Adafruit_NeoPixel strip = Adafruit_NeoPixel(1, PIN, NEO_GRB + NEO_KHZ800);

const unsigned char DB[] U8G_PROGMEM = 
{
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0x7F,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,
0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0xF8,0xFF,0xFF,0x00,
0xC0,0x03,0x00,0x78,0xF8,0xFF,0xFF,0x00,0xC0,0x03,0x00,0x78,0xF8,0xFF,0xFF,0x00,0xC0,0x03,0x00,0x78,0xF8,0xFF,0xFF,0x00,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,
0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0x03,0x00,0x78,0x78,0x00,0x00,0x0F,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

void setup() {
  Serial.begin(9600);
  pinMode(mic_pin, INPUT);
  pinMode(key_pin, INPUT);
  pinMode(buzzer_pin, OUTPUT);
  pinMode(PIN, OUTPUT);
  key_init();
  strip.begin();
  strip.show();
}

void loop() {
  getDB();
  analyticDB();
  updateOLED();
  updateButton();
  speakerDoing();
}

void updateOLED() {
  //OLED display
  if (OLEDShowTime > millis()) OLEDShowTime = millis();
  if(millis()-OLEDShowTime>INTERVAL_OLED) {
    OLEDShow(); //调用显示库
    OLEDShowTime = millis();
  } 
}

void OLEDShow() {
    u8g.firstPage();
    do {

      u8g.drawXBMP( 64, 1, 64, 64, DB);

      setFont_M;
      u8g.setPrintPos(5, 50);
      u8g.print(db);
      //u8g.print(recodeDB);
    } while( u8g.nextPage() );
}

void buzzer() {
  if (millis() - timer > 10) {
    if (!add) {
      i++;
      if (i >= 800)
        add = true;
    } else {
      i--;
      if (i <= 200) {
        add = false;
      }
    }
    tone(buzzer_pin, i);
    timer = millis();
  }
}


void getDB() {
  voice_data = analogRead(mic_pin);
  voice_data=map(voice_data,0,1023,0,5);
  db = (20. * log(10)) * (voice_data / 1.0);
  if(db>recodeDB) {
    recodeDB=db;
  }
  Serial.println(db);
}

void analyticDB() {
    if(db > voice) {
    numNoise++;
    Serial.println(numNoise);
  }
  if (lcd_time > millis()) lcd_time = millis();
  if (millis() - lcd_time > INTERVAL_LCD) {
    if(numNoise>maxNoise) {
        buzzer_speak = true;
        i = 200;
    }
//     Serial.print(numNoise);
//    Serial.print("\t");
//    Serial.println(maxNoise);
    numNoise=0;
    lcd_time = millis();
  }
}

void updateButton() {
  if (key_get(key_pin, 0)) {
    delay(200);
    buzzer_speak = false;
    recodeDB=0;
    time = millis();
  }
}

void speakerDoing() {
  if (buzzer_speak) {
    buzzer();
    strip.setPixelColor(0, strip.Color(125, 125, 125));
    strip.show();
  } else {
    noTone(buzzer_pin);
    strip.setPixelColor(0, strip.Color(0, 0, 0));
    strip.show();
  }
}
